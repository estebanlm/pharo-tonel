"
This testcase tests that we can correctly get the value of the temp vars from a context. That is,

 - it finds the correct context where the variable is defined to get the value
 - it handles well copying and temp vectors

Probably tests are missing covering all possible combinations of 
  - temps
  - copying temps
  - temp vectors
  - nested blocks
  - blocks from dead contexts
  - optimized blocks

However this class is a starting point for this.
"
Class {
	#name : #OCContextTempMappingTest,
	#superclass : #TestCase,
	#category : #OpalCompiler-Tests-FromOld,
	#timestamp : 'GuillermoPolito 4/10/2015 10:50'
}

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>fetchArgFromOptimizedBlockInsideFullBlock: anArg extraArg: anotherArg [
	
	| result |
	self class withAllSubclassesDo: [ :each | 
		result := anArg = anArg ifTrue: [ anotherArg value. thisContext tempNamed: #anArg ]].
	^result
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingArgOfOuterBlockFromAnotherDeepBlock [
	
	| actual |
	
	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].
	
	actual := [:outerArg | 
		outerArg asString.
		[ :innerArg | innerArg asString. thisContext tempNamed: #outerArg ] value: #innerValue.
		] value: #outerValue.
	
	self assert: actual equals: #outerValue
]

{
	#category : #'test - block arguments',
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingBlockArgumentNoneOptimizedBlock [
	" the #in: call is not optimized, the block argument 'x' is a real block local temporary (argument).
(OCContextTempMappingTest>>#testAccessingBlockArgumentNoneOptimizedBlock) numTemps -> 2"

	| a b |

	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].

	a := 1.
	b := a in: [ :x | thisContext tempNames ].
	self assert: b equals:#(a b x)
]

{
	#category : #'test - block arguments',
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingBlockArgumentOptimizedBlock [
	" the #ifNotNil: call is an optimized block, the block argument 'x' actually a method temporary.
(OCContextTempMappingTest>>#testAccessingBlockArgumentOptimizedBlock) numTemps -> 3"

	| a b |
	
	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].

	a := 1.
	b := a ifNotNil: [ :x | thisContext tempNames ].
	self assert: b equals: #(#a #b #x)
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingMethodArgFromOptimizedBlockContext [
	
	| actual |
	actual := self fetchArgFromOptimizedBlockInsideFullBlock: #argValue extraArg: #anotherArg.
	self assert: actual equals: #argValue
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingMultipleVariablesInVector [
	| t1 t2 t3 t4 t5 t6 |
	
	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].
	
	t1 := 1.
	t2 := 2.
	t3 := 3.
	t4 := 4. 
	t5 := 5 .
	t6 := 6.
	[t5 := 50.
	    t6 := 60.
	    t3 + t4.
	] value.
	
	self assert: t1 == (thisContext tempNamed: 't1').
	self assert: t2 == (thisContext tempNamed: 't2').
	self assert: t3 == (thisContext tempNamed: 't3').
	self assert: t4 == (thisContext tempNamed: 't4').
	self assert: t5 == (thisContext tempNamed: 't5').
	self assert: t6 == (thisContext tempNamed: 't6').
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingTempsVectorInBlock [

	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].

	[ | temp |
		[ temp := 1.
		self assert: ((thisContext tempNamed: 'temp') == 1) ] value.
	] value
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingTempsVectorInBlock2 [

	|a b r |
	
	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].
	
	a := [ r := 'failure'].
	[ b :='success'.
	r := thisContext ] on: Error do: a.

	self assert: r == (r tempNamed: 'r').
	self assert: (r tempNamed: 'a') == a.
	self assert: (r tempNamed: 'b') == b.
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingTempsVectorInBlock3 [

	|a b r |

	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].

	a := [ r := 'failure'].
	[ b :='success'.
	self assert: (thisContext tempNamed: 'a') equals: a. 
	] on: Error do: a.
	self assert: (thisContext tempNamed: 'r') equals: nil.
	self assert: (thisContext tempNamed: 'b') equals: 'success'.
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingVariablesInBlock [
	| theContext |

	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].

	[ | t1 |
		t1 := true.
		theContext := thisContext.
		self assert: (thisContext tempNamed: 'theContext') == thisContext.
		self assert: (theContext tempNamed: 't1').
	] value
	
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingVariablesInOptimizedBlock [
	
	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].

	1 to: 2 do: [ :index | |optimizedTemp|
		optimizedTemp := index.
		self assert: (thisContext tempNamed: 'optimizedTemp') == index
	]
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
OCContextTempMappingTest>>testAccessingVariablesInOptimizedBlock2 [

	| a b |

	"Check the source code availability to do not fail on images without sources"
	thisContext method hasSourceCode ifTrue: [ ^ self ].

	a:=1.
	b:=2.
	
	a < b ifTrue:[ |c|
		c:=50.
		self assert: (thisContext tempNamed: 'a') == 1.
		self assert: (thisContext tempNamed: 'b') == 2.
		self assert: (thisContext tempNamed: 'c') == 50.
	].
]
