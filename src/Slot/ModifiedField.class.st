"
I encapsulate the modification of a slot.
The two use-cases are: slot renaming or a changed slot type.
Both cases enforce recompilation of all the methods accessing the corresponding variable.

This is unlike the ShiftedField modification which is only used when the type of the slot does not change.
"
Class {
	#name : #ModifiedField,
	#superclass : #AbstractFieldModification,
	#instVars : [
		'newSlot',
		'originalSlot'
	],
	#category : #Slot-ClassBuilder,
	#timestamp : '<historical>'
}

{
	#category : #installing,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>installOn: aModification [
	aModification installModifiedSlot: self
]

{
	#category : #migrating,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>migrateAt: index to: newInstance from: oldInstance [
	newInstance
		instVarAt: index
		put: (oldInstance instVarAt: self oldFieldIndex)
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>newFieldIndex [
	^ newSlot index + fieldIndex
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>newSlot [
	^ newSlot
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>newSlot: anObject [
	newSlot := anObject
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>oldFieldIndex [
	^ originalSlot index + fieldIndex
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>originalSlot [

	^ originalSlot
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:35'
}
ModifiedField>>originalSlot: anObject [
	originalSlot := anObject
]
