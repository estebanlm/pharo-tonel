"
SUnit tests for class LayoutFrame
"
Class {
	#name : #LayoutFrameTest,
	#superclass : #TestCase,
	#category : #Morphic-Tests-Layouts,
	#timestamp : 'TorstenBergmann 9/5/2014 17:07'
}

{
	#category : #'tests - conversion',
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testAsLayoutFrame [
	| frame |
	
	frame := #(0.66 0.5 1 0.77 1 2 3 25) asLayoutFrame.
	self assert: frame leftFraction equals: 0.66.
	self assert: frame topFraction equals: 0.5.
	self assert: frame leftOffset equals: 1.
	self assert: frame topOffset equals: 2.
	
	self assert: frame rightFraction equals: 1.
	self assert: frame bottomFraction equals: 0.77.
	self assert: frame rightOffset equals: 3.
	self assert: frame bottomOffset equals: 25.
]

{
	#category : #'tests - conversion',
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testIdentity [
	self assert: (LayoutFrame fractions: (0 @ 0 corner: 1 @ 1)) = LayoutFrame identity
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testInset [
	| lf rectangle |
	lf := LayoutFrame new
			leftOffset: 10;
			topOffset: 10;
			rightOffset: -10;
			bottomOffset: -10;
			yourself.
	rectangle := lf layout: nil in: (50@10 corner: 150@70).
	self assert: (60@20 corner: 140@60) = rectangle
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testLeftTopAligned [
	| lf rectangle |
	lf := LayoutFrame new
		leftOffset: 10;
		topOffset: 10;
		rightFraction: 0 offset: 60;
		bottomFraction: 0 offset: 25;
		yourself.
	rectangle := lf layout: nil in: (50@10 corner: 150@70).
	self assert: (60@20 corner: 110@35) = rectangle
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testRightBottomQuadrant [
	| lf rectangle |
	lf := LayoutFrame new
			leftFraction: 1/2 offset: 1;
			topFraction: 1/2 offset: 1;
			rightFraction: 1 offset: -2;
			bottomFraction: 1 offset: -2;
			yourself.
	rectangle := lf layout: nil in: (50@10 corner: 150@70).
	self assert: (101@41 corner: 148@68) = rectangle
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testSpaceFill [
	| lf rectangle |
	lf := LayoutFrame identity.
	rectangle := lf layout: nil in: (50@10 corner: 150@70).
	self assert: (50@10 corner: 150@70) = rectangle
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testTransform [
	"the transform: operation is transforming a layoutFrame relatively to the reference rectangle: basically you transform to obtain a subrectangle area inside the reference rectangle"

	| lf rectangle |
	lf := LayoutFrame new
			leftOffset: 10;
			topOffset: 10;
			rightOffset: -10;
			bottomOffset: -10;
			yourself.
	rectangle := lf layout: nil in: (50@10 corner: 150@70).
	self assert: (60@20 corner: 140@60) = rectangle
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testTransformReturnASubArea [
	"the transform: operation is transforming a layoutFrame relatively to the reference rectangle: basically you transform to obtain a subrectangle area inside the reference rectangle"

	| lf rectangle refRectangle |
	lf := LayoutFrame new
			leftOffset: 10;
			topOffset: 10;
			rightOffset: -10;
			bottomOffset: -10;
			yourself.
	refRectangle := 0@0 extent: 100@200.
	rectangle := lf transform: refRectangle.
	self assert: rectangle width = 80.
	self assert: rectangle height = 180.
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:43'
}
LayoutFrameTest>>testTransformReturnEmptyRectangleWhenNotPossibleToPlace [
	"the transform: operation is transforming a layoutFrame relatively to the reference rectangle: basically you transform to obtain a subrectangle area inside the reference rectangle"

	| lf rectangle refRectangle |
	lf := LayoutFrame new
			leftOffset: 10;
			topOffset: 10;
			rightOffset: -10;
			bottomOffset: -10;
			yourself.
	refRectangle := 0@0 extent: 10@10.
	rectangle := lf transform: refRectangle.
	self assert: rectangle width = 0.
	self assert: rectangle height = 0.
]
