"
I am a refactory change for a method change. I know a bout the 
source selector and protocol of the new or modified method. 

The controller instance variable is not directly use by me but needed for executing the change by compiling this
method, the controller is what we pass to the compiler, as the object to get notified by the compiler about the compilation result.

"
Class {
	#name : #RBAddMethodChange,
	#superclass : #RBRefactoryClassChange,
	#instVars : [
		'source',
		'selector',
		'protocols',
		'controller',
		'definedSelector'
	],
	#category : #Refactoring-Changes,
	#timestamp : 'NicolaiHess 9/9/2016 20:08'
}

{
	#category : #'instance creation',
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange class>>compile: aString in: aClass [
	^ self compile: aString in: aClass for: nil
]

{
	#category : #'instance creation',
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange class>>compile: aString in: aBehavior classified: aProtocol [
	^ self compile: aString in: aBehavior classified: aProtocol for: nil
]

{
	#category : #'instance creation',
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange class>>compile: aString in: aBehavior classified: aProtocol for: aController [
	^ self new class: aBehavior protocol: aProtocol source: aString controller: aController
]

{
	#category : #'instance creation',
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange class>>compile: aString in: aClass for: aController [
	^ self new class: aClass source: aString contoller: aController
]

{
	#category : #comparing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>= anAddMethodChange [
	super = anAddMethodChange
		ifFalse: [ ^ false ].
	^ self parseTree = anAddMethodChange parseTree
]

{
	#category : #converting,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>asUndoOperation [
	^ (self changeClass includesSelector: self selector)
		ifTrue: [ 
			| oldProtocol |
			oldProtocol := RBBrowserEnvironment new whichProtocolIncludes: self selector in: self changeClass.
			oldProtocol isNil
				ifTrue: [ oldProtocol := #accessing ].
			RBRefactoryChangeManager changeFactory addMethodSource: (self methodSourceFor: self selector) in: self changeClass classified: oldProtocol ]
		ifFalse: [ RBRefactoryChangeManager changeFactory removeMethod: selector from: self changeClass ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>changeForClass: aClassName selector: aSelector  [
	^ (isMeta not and: [ self selector = aSelector and: [ className = aClassName ] ])
		ifTrue: [ self ]
		ifFalse: [ nil ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>changeForMetaclass: aClassName selector: aSelector  [
	^ (isMeta and: [ self selector = aSelector and: [ className = aClassName ] ])
		ifTrue: [ self ]
		ifFalse: [ nil ]
]

{
	#category : #printing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>changeString [
	^ self displayClassName , '>>' , self selector
]

{
	#category : #initialize-release,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>class: aClass protocol: aProtocol source: aString  [
	self changeClass: aClass.
	self protocols: aProtocol.
	source := aString
]

{
	#category : #initialize-release,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>class: aClass protocol: aProtocol source: aString controller: aController  [
	self changeClass: aClass.
	self protocols: aProtocol.
	source := aString.
	controller := aController
]

{
	#category : #initialize-release,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>class: aClass source: aString contoller: aController [
	self changeClass: aClass.
	source := aString.
	self protocols: (RBBrowserEnvironment new whichProtocolIncludes: self selector in: aClass).
	controller := aController
]

{
	#category : #private,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>controller [
	^ controller
]

{
	#category : #initialize-release,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>controller: aController  [
	controller := aController
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>definedSelector [
	^ definedSelector
]

{
	#category : #comparing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>hash [
	^ self parseTree hash
]

{
	#category : #private,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>parseTree [
	^ RBParser parseMethod: source onError: [ :str :pos | ^ nil ]
]

{
	#category : #private,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>primitiveExecute [
	definedSelector := self changeClass 
		compile: self source
		classified: self protocol
		notifying: self controller
]

{
	#category : #printing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>printOn: aStream  [
	aStream
		nextPut: $!;
		nextPutAll: self displayClassName;
		nextPutAll: ' methodsFor: ''';
		nextPutAll: self protocol;
		nextPutAll: ''' stamp: ';
		print: self changeStamp;
		nextPut: $!;
		cr;
		nextPutAll: (source copyReplaceAll: '!' with: '!!');
		nextPutAll: '! !'
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>protocol [
	^ self protocols first
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>protocols [
	^ protocols
]

{
	#category : #initialize-release,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>protocols: aCollectionOrString [
	protocols := aCollectionOrString isString
		ifTrue: [ 	
			aCollectionOrString = Protocol unclassified 
				ifTrue: [ protocols := #(accessing) ]
				ifFalse: [ Array with: aCollectionOrString ] ]
		ifFalse: [ aCollectionOrString ].
		

]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>selector [
	selector isNil ifTrue: [ 
		selector := RBParser parseMethodPattern: source.
		selector isNil
			ifTrue: [ selector := #unknown ] ].
	^ selector
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:23'
}
RBAddMethodChange>>source [
	^ source
]
