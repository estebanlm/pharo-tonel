"
I am a LabelledContainer specialized to manage a InputTextDropList.
See LabelledContainer

self example

I provide the accessors inputTextDropList to be more intuitive than subwidget, and the shortcuts input and dropList.

I provide shortcuts for the most common methods to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors.
"
Class {
	#name : #LabelledInputTextDropList,
	#superclass : #LabelledContainer,
	#category : #Spec-PolyWidgets-Labelled,
	#timestamp : 'Spirita 7/25/2016 17:03'
}

{
	#category : #specs,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList class>>defaultSpec [
	<spec: #default>
	^ super labelLeft 
]

{
	#category : #example,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList class>>example [
	| example |
	example := self abstractExample.
	example
		ghostText: 'ghost text';
		items: {'item 1' . 'item 2'};
		displayBlock: [ :item | item asString ];
		extent: 450 @ 50;
		openWithSpec.
	^ example
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>acceptOnCR: aBoolean [
	^ self input acceptOnCR: aBoolean
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>beEncrypted [
	^ self input beEncrypted
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>displayBlock: aBlock [
	^ self dropList displayBlock: aBlock
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>dropList [
	^  self inputTextDropList dropList
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>emptyList [
	^ self dropList emptyList
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>encrypted: aBoolean [
	^ self input encrypted: aBoolean
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>entryCompletion: anEntryCompletion [
	^ self input entryCompletion: anEntryCompletion
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>ghostText: aText [
	^ self input ghostText: aText
]

{
	#category : #initialization,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>initializeWidgets [
super initializeWidgets.
	self content: InputTextDropList.
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>input [
	^ self inputTextDropList input
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>inputTextDropList [
	^ subwidget
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>items: aList [
^ 	self dropList items: aList
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>listSize [
	^ self dropList listSize
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>resetSelection [
	^ self dropList resetSelection
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>selectedItem [
	^ self dropList selectedItem
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>setIndex: anIndex [
^ 	self dropList setIndex: anIndex
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>text [
	^ self input text
]

{
	#category : #api-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>text: aText [
	^ self input text: aText
]

{
	#category : #events-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>whenSelectedItemChanged: aBlock [
	self dropList
		whenSelectedItemChanged: aBlock
]

{
	#category : #events-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>whenSelectionChanged: aBlock [
	self dropList
		whenSelectionChanged: aBlock
]

{
	#category : #events-shortcuts,
	#timestamp : ' 8/31/2017 05:26:19'
}
LabelledInputTextDropList>>whenSelectionIndexChanged: aBlock [
	self dropList
		whenSelectionIndexChanged: aBlock
]
