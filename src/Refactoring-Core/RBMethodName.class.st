"
I represent a method name (selector and arguments) in the refactoring framework.

I am used by refactoring operations - for example RBMoveMethodRefactoring.

I have a selector name and a list of arguments and I use RBScanner to validate the syntax of my selector name.

In the refactory framework I am used for representing a new method name, generated by the refactoring operation or requested by the caller.

You can create instances of me by 
RBMethodName selector: 'color:' arguments:{'aColor'}.
(RBMethodName selector:'color' arguments:{}) isValid.
"
Class {
	#name : #RBMethodName,
	#superclass : #Model,
	#instVars : [
		'selector',
		'arguments'
	],
	#category : #Refactoring-Core-Support,
	#timestamp : 'NicolaiHess 5/22/2016 11:56'
}

{
	#category : #'instance creation',
	#timestamp : ' 8/31/2017 05:26:24'
}
RBMethodName class>>selector: aSymbol arguments: stringCollection  [
	^(self new)
		selector: aSymbol;
		arguments: stringCollection;
		yourself
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:24'
}
RBMethodName>>arguments [
	^arguments
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:24'
}
RBMethodName>>arguments: nameCollection  [
	arguments := nameCollection.
	self changed: #arguments
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:24'
}
RBMethodName>>isValid [
	^ (RBCondition checkMethodName: self selector in: self class) 
		and: [ self selector numArgs = self arguments size ]
]

{
	#category : #printing,
	#timestamp : ' 8/31/2017 05:26:24'
}
RBMethodName>>printOn: aStream [
	| argumentStream |
	self isValid
		ifFalse: [ ^ aStream nextPutAll: '(invalid)' ].
	argumentStream := self arguments readStream.
	self selector keywords keysAndValuesDo: [ :key :part |
		key = 1 ifFalse: [ aStream space ].
		aStream nextPutAll: part.
		(self selector isUnary or: [ argumentStream atEnd ]) 
			ifTrue: [ ^ self ].
		aStream space; nextPutAll: argumentStream next ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:24'
}
RBMethodName>>selector [
	^selector
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:24'
}
RBMethodName>>selector: aSymbol  [
	selector := aSymbol asSymbol.
	self changed: #selector
]
