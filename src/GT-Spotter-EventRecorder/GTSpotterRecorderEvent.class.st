"
GTSpotterRecorderEvent is the root class for representing usage data generated by Spotter. 
All events have a timestamp.
"
Class {
	#name : #GTSpotterRecorderEvent,
	#superclass : #Object,
	#instVars : [
		'timestamp',
		'info'
	],
	#category : #GT-Spotter-EventRecorder-Events,
	#timestamp : 'AndreiChis 3/2/2015 15:30'
}

{
	#category : #'instance creation',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent class>>fromAnnouncement: anAnnouncement [

	^ self new fromAnnouncement: anAnnouncement
]

{
	#category : #'instance creation',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent class>>gtExampleAnySubclass [
	<gtExample>
	^ self subclasses anyOne new 
]

{
	#category : #visitor,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>accept: aVisitor [
	^ self subclassResponsibility
]

{
	#category : #'accessing - announcement info',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>announcementTimestamp [
	^ self infoAt: #timestamp
]

{
	#category : #converting,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>associations [
	^ info 
			ifNil: [ #() ]
			ifNotNil: [ info associations ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>closeActionSymbol [
	^ #improper
]

{
	#category : #'accessing - announcement info',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>computerUUID [
	^ self infoAt: #computerUUID
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>dateAndTime [
	| aTimestamp |
	self infoAt: #dateAndTime ifPresent: [ :obj | ^ obj ] ifAbsent: [ "ignore" ].
	aTimestamp := self timestamp.
	aTimestamp ifNil: [ ^ aTimestamp ].
	
	aTimestamp isNumber 
		ifTrue: [ "version 1 keeps unix time"
			"We do not have information about time zone."
			^ self 
				infoAt: #dateAndTime 
				put: ((DateAndTime fromUnixTime: aTimestamp) translateTo: 0) ].
	
	"since version 2, timestamp keeps DateAndTime object."
	^ aTimestamp
]

{
	#category : #'accessing - announcement info',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>eventRecorderVersion [
	^ self infoAt: #eventRecorderVersion
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>eventTimestamp [
	^ self timestamp
]

{
	#category : #initialization,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>fromAnnouncement: anAnnouncement [

	
]

{
	#category : #gt-inspector-extension,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>gtInspectorItems [
	^ Array
		 with: (#eventTimestamp -> self timestamp) withAll: self associations
]

{
	#category : #gt-inspector-extension,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>gtInspectorItemsIn: composite [
	<gtInspectorPresentationOrder: -1>  
	^ (composite table)
		title: 'Info';
		display: [ :anEvent | anEvent gtInspectorItems ];
		children: [ :each | 
			(each value isDictionary) 
				ifTrue: [ each value associations ] 
				ifFalse: [ (each value isArray and: [ each value allSatisfy: #isDictionary ])
						ifTrue: [ each value collectWithIndex: [:x :i | i -> x ] ]
						ifFalse: [ #() ] ] ];
		column: 'Key' 
			evaluated: [:each | GTObjectPrinter asTruncatedTextFrom: each key ];
		column: 'Value' 
			evaluated: [:each | GTObjectPrinter asTruncatedTextFrom: each value ];
		beMultiple;
		send: [ :selection | 
			(selection notNil and: [ selection size = 1 ]) 
				ifTrue: [ selection anyOne value ] 
				ifFalse: [ selection collect: #value ] ];
		showOnly: 50
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>hashForText: aString [
	^ self settings obfuscateIfNecessary: aString
]

{
	#category : #'accessing - announcement info',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>imageHash [
	^ self infoAt: #imageHash
]

{
	#category : #'accessing - announcement info',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>imageVersion [
	^ self infoAt: #imageVersion
]

{
	#category : #private,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>info [
	"For the testing purpose only; we use it in #instancesForAllEvents.
	We want to instantiate info only when it is really necessary."
	^ info ifNil: [ info := Dictionary new ].
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>infoAt: key [
	^ self infoAt: key ifAbsent: [ nil ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>infoAt: key ifAbsent: absentBlock [
	info ifNil: [ ^ absentBlock value].
	^ info at: key ifAbsent: absentBlock
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>infoAt: key ifAbsentPut: putBlock [
	info ifNil: [ info := Dictionary new ].
	^ info at: key ifAbsentPut: putBlock
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>infoAt: key ifPresent: presentBlock ifAbsent: absentBlock [
	info ifNil: [ ^ absentBlock value].
	^ info at: key ifPresent: presentBlock ifAbsent: absentBlock
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>infoAt: key put: value [
	info ifNil: [ info := Dictionary new ].
	^ info at: key put: value
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>infoAt: key putHashForText: valueString  [
	^ self 
		infoAt: key 
		put: (self hashForText: valueString)
]

{
	#category : #initialization,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>initialize [
	super initialize.
	timestamp := DateAndTime now.
]

{
	#category : #initialization,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>initializeObfuscated [
	self obfuscated: Privacy sendEntityNames not.
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isCategorySelection [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isCloseSpotter [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isContextChanged [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isDive [
	^ self isDiveIn or: [ self isDiveOut ]
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isDiveIn [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isDiveOut [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isHidePreview [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isOpenOrCloseSpotter [
	^ self isOpenSpotter or: [ self isCloseSpotter ]
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isOpenSpotter [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isSearchFinished [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isShowPreview [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isUserSelection [
	^ false
]

{
	#category : #testing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>isUserSelectionClass [
	^ false
]

{
	#category : #'accessing - announcement info',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>latestUpdate [
	^ self infoAt: #latestUpdate
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>obfuscated [
	^ self infoAt: #obfuscated ifAbsent: true
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>obfuscated: aBoolean [
	^ self infoAt: #obfuscated put: aBoolean
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>removeInfoKey: key [
	^ self removeInfoKey: key ifAbsent: [ "ignore" ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>removeInfoKey: key ifAbsent: absentBlock [
	info ifNil: [ ^ absentBlock value].
	^ info removeKey: key ifAbsent: absentBlock
]

{
	#category : #'accessing - announcement info',
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>sessionCreationTime [
	^ self infoAt: #sessionCreationTime
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>settings [
	^ GlobalIdentifier uniqueInstance
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>stringHashesAt: aSymbol [
	^ self 
		infoAt: aSymbol
		ifPresent: [ :array | array first ]
		ifAbsent: [ #() ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>stringHashesFor: anArrayOrNil [
	^ anArrayOrNil 
			ifNil: [ #() ]
			ifNotNil: [ :array | array first ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>stringSizesAt: aSymbol [
	^ self 
		infoAt: aSymbol
		ifPresent: [ :array | array second ]
		ifAbsent: [ #() ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>stringSizesFor: anArrayOrNil [
	^ anArrayOrNil 
			ifNil: [ #() ]
			ifNotNil: [ :array | array second ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>stringSpecialsAt: aSymbol [
	^ self 
		infoAt: aSymbol
		ifPresent: [ :array | array third ]
		ifAbsent: [ #() ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>stringSpecialsFor: anArrayOrNil [
	^ anArrayOrNil 
			ifNil: [ #() ]
			ifNotNil: [ :array | array third ]
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>textInfoFrom: aString [
	| strings hashes sizes specials |
	aString isNil ifTrue: [ ^ nil ].
	aString size isZero ifTrue: [ ^ nil ].
	strings := aString substrings.
	hashes := strings collect: [ :each | self hashForText: each ] as: Array.
	sizes := strings collect: #size as: Array.
	specials := strings collect: [ :each | each beginsWith: '#' ] as: Array.
	^ Array with: hashes with: sizes with: specials 
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 05:26:42'
}
GTSpotterRecorderEvent>>timestamp [
	^ timestamp
]
