"
Find assignment nodes with block arguments on its left side.
"
Class {
	#name : #RBFindBlockArgumentAssignment,
	#superclass : #RBProgramNodeVisitor,
	#instVars : [
		'arguments',
		'argumentAssignments'
	],
	#category : #AST-Core-Visitors,
	#timestamp : 'NicolaiHess 8/23/2014 21:19'
}

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment class>>collectAssignments: aParseTree [
	^ (self new executeTree: aParseTree) assignments
]

{
	#category : #accessing,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment>>assignments [
	^  argumentAssignments
]

{
	#category : #visiting,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment>>executeTree: aParseTree [
	^ self visitNode: aParseTree
]

{
	#category : #initialization,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment>>initialize [
	super initialize.
	arguments := Set new.
	argumentAssignments := Set new.

]

{
	#category : #private,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment>>is: aVar inScopeOf: anArgumentNode [
	"if this Var is a child of if anArgumentNode parent, then the
assignment on aVar happens in scope of the BlockNode of this ArgumentNode "

	| parent |
	parent := aVar parent.
	[ parent notNil ]
		whileTrue: [ 
			parent = anArgumentNode parent
				ifTrue: [ ^ true ].
			parent := parent parent ].
	^ false
]

{
	#category : #visiting,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment>>visitArgumentNode: anArgumentNode [
	"register argument node if it is an block argument"

	anArgumentNode parent isBlock
		ifTrue: [ arguments add: anArgumentNode ]
]

{
	#category : #visiting,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment>>visitAssignmentNode: anAssignmentNode [
	"search registered argument variable with the same name and scope"

	| varName |
	super visitAssignmentNode: anAssignmentNode.
	varName := anAssignmentNode variable name.
	arguments
		detect: [ :elem | elem name = varName and: [ self is: anAssignmentNode variable inScopeOf: elem ] ]
		ifFound: [ argumentAssignments add: varName ]
]

{
	#category : #visiting,
	#timestamp : ' 8/31/2017 07:16:40'
}
RBFindBlockArgumentAssignment>>visitTemporaryNodes: aNodeCollection [
	"here our trait calls visitArgumentNodes: but we are not interested on temporary nodes -> ignore this."
	
]
