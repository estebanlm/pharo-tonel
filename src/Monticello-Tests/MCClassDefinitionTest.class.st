"

"
Class {
	#name : #MCClassDefinitionTest,
	#superclass : #MCTestCase,
	#instVars : [
		'previousChangeSet'
	],
	#category : #Monticello-Tests,
	#timestamp : ''
}

{
	#category : #'as yet unclassified',
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest class>>classAComment [
	^ 'This is a mock class. The Monticello tests manipulated it to simulate a developer modifying code in the image.'
]

{
	#category : #'as yet unclassified',
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest class>>classACommentStamp [
	^  'cwp 8/10/2003 16:43'
]

{
	#category : #'as yet unclassified',
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest class>>restoreClassAComment [
	Smalltalk globals
		at: #MCMockClassA
		ifPresent: [ :a | a classComment: self classAComment stamp: self classACommentStamp ]
]

{
	#category : #private,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>classAComment [
	^ self class classAComment
]

{
	#category : #private,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>creationMessage [
	^ MessageSend
		receiver: MCClassDefinition
		selector: #name:superclassName:category:instVarNames:classVarNames:poolDictionaryNames:classInstVarNames:type:comment:commentStamp:
]

{
	#category : #running,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>setUp [
	Smalltalk globals at: #MCMockClassC ifPresent: [ :c | c removeFromSystem ]
]

{
	#category : #running,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>tearDown [
	Smalltalk globals at: #MCMockClassC ifPresent: [ :c | c removeFromSystem ]
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testCannotLoad [
	| d |
	self deny: (Smalltalk hasClassNamed: 'MCMockClassC').
	d :=  self mockClass: 'MCMockClassC' super: 'NotAnObject'.
	self should: [d load] raise: Error.
	self deny: (Smalltalk hasClassNamed: 'MCMockClassC').
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testComparison [
	| d1 d2 d3 d4 |
	d1 := self mockClass: 'A' super: 'X'.
	d2 := self mockClass: 'A' super: 'Y'.
	d3 := self mockClass: 'B' super: 'X'.
	d4 := self mockClass: 'B' super: 'X'.
	
	self assert: (d1 isRevisionOf: d2).
	self deny: (d1 isSameRevisionAs: d2).

	self assert: (d3 isRevisionOf: d4).
	self assert: (d3 isSameRevisionAs: d4).
	
	self deny: (d1 isRevisionOf: d3).
	self deny: (d4 isRevisionOf: d2).
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testCreation [
	| d |
	d :=  self mockClassA asClassDefinition.
	self assert: d className = #MCMockClassA.
	self assert: d superclassName = #MCMock.
	self assert: d type = #normal.
	self assert: d category = self mockCategoryName.
	self assert: d instVarNames asArray = #('ivar').
	self assert: d classVarNames asArray = #('CVar' 'InitializationOrder').
	self assert: d classInstVarNames asArray = #().
	self assert: d comment isString.
	self assert: d comment = self classAComment.
	self assert: d commentStamp = self mockClassA organization commentStamp
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testDefinitionString [
	| d |
	d := self mockClassA asClassDefinition.
	self assert: d definitionString = self mockClassA definition.
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testEquals [
	| a b |
	a := self mockClass: 'ClassA' super: 'SuperA'.
	b := self mockClass: 'ClassA' super: 'SuperA'.
	self assert: a = b
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testEqualsSensitivity [
	| message a b defA args defB |
	message := self creationMessage.
	a := #(ClassA SuperA CategoryA #(iVarA) #(CVarA) #(PoolA) #(ciVarA)
			typeA 'A comment' 'A').
	b := #(ClassB SuperB CategoryB #(iVarB) #(CVarB) #(PoolB) #(ciVarB)
			typeB 'B comment' 'B').
	
	defA := message valueWithArguments: a.
	1 to: 8 do: [:index |
				args := a copy.
				args at: index put: (b at: index).
				defB := message valueWithArguments: args.
				self deny: defA = defB.]
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testKindOfSubclass [
	| classes |
	classes := {self mockClassA. String. Context. WeakArray. Float}.
	classes do: [:c | | d |
		d :=  c asClassDefinition.
		self assert: d kindOfSubclass = c kindOfSubclass.
	].
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testLoadAndUnload [
	| d c |
	d := self mockClass: 'MCMockClassC' super: 'Object'.
	d load.
	self assert: (Smalltalk hasClassNamed: 'MCMockClassC').
	c := Smalltalk globals classNamed: 'MCMockClassC'.
	self assert: (c isKindOf: Class).
	self assert: c superclass = Object.
	self assert: c instVarNames isEmpty.
	self assert: c classVarNames isEmpty.
	self assert: c sharedPools isEmpty.
	self assert: c category = self mockCategoryName.
	self assert: c organization classComment = (self commentForClass: 'MCMockClassC').
	self assert: c organization commentStamp = (self commentStampForClass: 'MCMockClassC').
	d unload.
	self deny: (Smalltalk hasClassNamed: 'MCMockClassC')
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testValidTraitComposition [
	"Related to http://code.google.com/p/pharo/issues/detail?id=2148"

	| d className cls |
	className := 'MCMockClassC'.
	d := MCClassDefinition
		name: className
		superclassName: 'Object'
		traitComposition: '{Trait1}'
		classTraitComposition: '{}'
		category: self mockCategoryName
		instVarNames: #()
		classVarNames: #()
		poolDictionaryNames: #()
		classInstVarNames: #()
		type: #normal
		comment: (self commentForClass: className)
		commentStamp: (self commentStampForClass: className).
	d load.
	self assert: (Smalltalk hasClassNamed: 'MCMockClassC').
	cls := Smalltalk at: #MCMockClassC.
	self assert: (cls includesSelector: #c1).
	self assert: ((Smalltalk at: #MCMockClassC) traitComposition allTraits includes: Trait1)
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testValidTraitComposition2 [
	"Related to http://code.google.com/p/pharo/issues/detail?id=2148"

	| d className cls |
	className := 'MCMockClassC'.
	d := MCClassDefinition
		name: className
		superclassName: 'Object'
		traitComposition: 'Trait1'
		classTraitComposition: '{}'
		category: self mockCategoryName
		instVarNames: #()
		classVarNames: #()
		poolDictionaryNames: #()
		classInstVarNames: #()
		type: #normal
		comment: (self commentForClass: className)
		commentStamp: (self commentStampForClass: className).
	d load.
	self assert: (Smalltalk hasClassNamed: 'MCMockClassC').
	cls := Smalltalk at: #MCMockClassC.
	self assert: (cls includesSelector: #c1).
	self assert: ((Smalltalk at: #MCMockClassC) traitComposition allTraits includes: Trait1)
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testValidTraitComposition3 [
	"Related to http://code.google.com/p/pharo/issues/detail?id=2148"

	| d className cls |
	className := 'MCMockClassC'.
	d := MCClassDefinition
		name: className
		superclassName: 'Object'
		traitComposition: 'Trait1 + Trait2'
		classTraitComposition: '{}'
		category: self mockCategoryName
		instVarNames: #()
		classVarNames: #()
		poolDictionaryNames: #()
		classInstVarNames: #()
		type: #normal
		comment: (self commentForClass: className)
		commentStamp: (self commentStampForClass: className).
	d load.
	self assert: (Smalltalk hasClassNamed: 'MCMockClassC').
	cls := Smalltalk at: #MCMockClassC.
	self assert: (cls includesSelector: #c1).
	self assert: (cls includesSelector: #c2).
	self assert: ((Smalltalk at: #MCMockClassC) traitComposition allTraits includes: Trait1).
	self assert: ((Smalltalk at: #MCMockClassC) traitComposition allTraits includes: Trait2)
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:31'
}
MCClassDefinitionTest>>testValidTraitComposition4 [
	"Related to http://code.google.com/p/pharo/issues/detail?id=2598"

	| d className cls |
	className := 'MCMockClassC'.
	d := MCClassDefinition
		name: className
		superclassName: 'Object'
		traitComposition: 'Trait1 - {#c1}'
		classTraitComposition: '{}'
		category: self mockCategoryName
		instVarNames: #()
		classVarNames: #()
		poolDictionaryNames: #()
		classInstVarNames: #()
		type: #normal
		comment: (self commentForClass: className)
		commentStamp: (self commentStampForClass: className).
	d load.
	self assert: (Smalltalk hasClassNamed: 'MCMockClassC').
	cls := Smalltalk at: #MCMockClassC.
	self assert: (cls selectors includesAll: {#c}).
	self deny: (cls selectors includesAnyOf: {#c1})
]
