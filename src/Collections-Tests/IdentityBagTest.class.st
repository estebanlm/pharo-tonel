"
SUnit tests for identity bags
"
Class {
	#name : #IdentityBagTest,
	#superclass : #BagTest,
	#instVars : [
		'equalNotIdenticalElement',
		'elementToCopy',
		'identityBagNonEmptyNoDuplicate5Elements',
		'elementAlreadyIncluded',
		'identityBagWithoutElement'
	],
	#category : #Collections-Tests-Unordered,
	#timestamp : 'TorstenBergmann 2/20/2014 15:20'
}

{
	#category : #requirements,
	#timestamp : ' 8/31/2017 05:26:28'
}
IdentityBagTest>>elementToCopy [
	^ elementToCopy ifNil: [ elementToCopy := 'element to copy' ]
]

{
	#category : #requirements,
	#timestamp : ' 8/31/2017 05:26:28'
}
IdentityBagTest>>equalNotIdenticalElement [
	^ equalNotIdenticalElement ifNil: [ equalNotIdenticalElement := self elementToCopy copy ]
]

{
	#category : #requirements,
	#timestamp : ' 8/31/2017 05:26:28'
}
IdentityBagTest>>identityCollectionWithElementsCopyNotIdentical [
"Returns a collection including elements for which #copy doesn't return the same object."
	^ identityBagNonEmptyNoDuplicate5Elements ifNil: [ 
	identityBagNonEmptyNoDuplicate5Elements := IdentityBag new add: 2.5 ; add: 1.5  ;add: 5.5 ; yourself ]
]

{
	#category : #requirements,
	#timestamp : ' 8/31/2017 05:26:28'
}
IdentityBagTest>>speciesClass [
	^ IdentityBag
]

{
	#category : #'tests - converting',
	#timestamp : ' 8/31/2017 05:26:28'
}
IdentityBagTest>>testAsSetWithEqualsElements [
	| t1 |
	t1 := self withEqualElements asSet.
	self withEqualElements
		do: [:t2 | self assert: (t1 occurrencesOf: t2)
					= 1].
	self assert: t1 class = IdentitySet
]

{
	#category : #tests,
	#timestamp : ' 8/31/2017 05:26:28'
}
IdentityBagTest>>testIdentity [
	"self run:#testIdentity" 
	"self debug:#testIdentity"
	| bag identityBag aString anOtherString |
	
	aString := 'hello'.
	anOtherString := aString copy.
	
	self assert: (aString = anOtherString).
	self assert: (aString == anOtherString) not.

	bag := Bag new.
	bag add: aString.
	bag add: aString.
	bag add: anOtherString.
	self assert: (bag occurrencesOf: aString) = 3.
	self assert: (bag occurrencesOf: anOtherString) = 3.
	
	identityBag := IdentityBag new.
	identityBag add: aString.
	identityBag add: aString.
	identityBag add: anOtherString.
	
	self assert: (identityBag occurrencesOf: aString) = 2.
	self assert: (identityBag occurrencesOf: anOtherString) = 1.




]

{
	#category : #'tests - identity adding',
	#timestamp : ' 8/31/2017 05:26:28'
}
IdentityBagTest>>testIdentityAdd [
	| added oldSize |
	oldSize := self collection size.
	self collection add: self elementToCopy .
	self deny: (self collection includes: self equalNotIdenticalElement).
	
	added := self collection add: self equalNotIdenticalElement.
	self assert: added == self equalNotIdenticalElement.
	self assert: (self collection includes: self equalNotIdenticalElement)
]
